
import {spawnSync} from 'node:child_process';
import fs from 'node:fs';
import path from 'node:path';

function execute(cmd, args, options) {
  const { error, status } = spawnSync(cmd, args, {...options || {}, shell: true, stdio: 'inherit'});
  if (error) {
    throw new(Error);
  }
  if (status !== 0) {
    throw new Error(`${cmd} exited with status code: ${status}`);
  }
}

function readFileAsUTF8(filename) {
  return fs.readFileSync(filename, { encoding: 'utf-8' });
}

function fixupGenerated(srcFilename, dstFilename) {
  //execute('git')
  let ts = `\
// *********************************************************************************************
// This file is manually-edited by diffing against an autogenerated file. See README.md.
// *********************************************************************************************

// *********************************************************************************************
// Manually-written - auto copied from extra.d.ts
// *********************************************************************************************

${readFileAsUTF8('extra.d.ts')}
  
// *********************************************************************************************
// Semi-auto-generated (by manual diff with autogenerated types)
// *********************************************************************************************

${readFileAsUTF8(srcFilename)}
`
  ts = ts
    // Replace broken AllowSharedBufferSource with GPUAllowSharedBufferSource
    .replace(/(?<!\/\/.*)\bAllowSharedBufferSource\b/g, 'GPUAllowSharedBufferSource')

    // convert [[#anchor]] to {@link spec_url}
    // convert [[#anchor|text]] to {@link spec_url|text}
    .replace(/([^#])\[\[([^\[].*?)\]\]/g, '$1{@link https://www.w3.org/TR/webgpu/$2}')

    // convert {{ref}} to {@link ref}
    // convert {{ref|text}} to {@link ref|text}
    .replace(/\{\{(.*?)\}\}/g, '{@link $1}')

    // convert {@link foo/method(...)} to {@link foo#method}
    .replace(/\{@link ([^[}]+)\/(.*?)\(.*?\)}/g, '{@link $1#$2}')

    // convert {@link foo#[[bar]]} to {@link foo}.`[[bar]]`
    .replace(/\{@link ([^[}]+)#\[\[(.*?)]]}/g, '{@link $1}.`[[$2]]`')

    // convert {@link foo#"bar"} to {@link foo} `"bar"`
    .replace(/\{@link ([^[}]+)#"(.*?)"}/g, '{@link $1} `"$2"`')

    // fix links of the form {@link foo|text} -> {@link foo | text}
    .replace(/\{@link ([^}|]+)\|([^}|]+)\}/g, '{@link $1 | $2}')

    // remove items that are known not to be linkable
    .replace(/{@link Promise}/g, 'Promise')
    .replace(/{@link ArrayBuffer}/g, 'ArrayBuffer')
    .replace(/{@link Uint32Array}/g, 'Uint32Array')
    .replace(/{@link RenderState}/g, 'RenderState')
    .replace(/{@link double}/g, '`double`')

    .replace(/<pre highlight=['"]?(.*)['"]?>/g, '```$1')
    .replace(/<\/pre>/g, '```')

    // add new(): never;
    .replace(/(\ndeclare\svar\s\w+:\s\{\n\s+prototype:.*?\n)\};/g, '$1  new(): never;\n};')

    // replace : GPUExtent3D -> : GPUExtent3DStrict
    .replace(/: GPUExtent3D\b/g, ': GPUExtent3DStrict')

    // replace Promise<... | undefined> with Promise<...>
    .replace(/( Promise<[^>]*?)\s+\|\s+undefined\s*>/g, '$1>')

    ; // end of replacements

  fs.writeFileSync(dstFilename, ts);
  console.log(`wrote ${dstFilename}`);
}

execute(
  './node_modules/.bin/bikeshed-to-ts',
  [
    '--in', './gpuweb/spec/index.bs',
    '--out', './generated/index.d.ts',
    '--forceGlobal',
    '--nominal',
  ]
);
fixupGenerated('./generated/index.d.ts', './generated/index.d.ts');
execute('./node_modules/.bin/prettier', ['-w', 'generated/index.d.ts']);
